#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print usage
usage() {
    echo "Usage: fthr new [options] project_name"
    echo
    echo "Options:"
    echo "  --no-git        Skip git initialization"
    echo "  --no-deps       Skip dependency installation"
    echo "  --template      Project template to use (minimal|full|api)"
    echo "  --port         Server port (default: 3000)"
    echo "  --host         Server host (default: localhost)"
    echo "  -h, --help      Show this help message"
}

# Print error and exit
error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

# Print success message
success() {
    echo -e "${GREEN}$1${NC}"
}

# Print info message
info() {
    echo -e "${YELLOW}$1${NC}"
}

# Print debug message
debug() {
    echo -e "${BLUE}$1${NC}"
}


# Create README.md
create_readme() {
    local project_name=$1
    local template=$2
    
    cat > "README.md" << EOL
# ${project_name}

A Feather web application.

## Prerequisites

- C++20 compatible compiler
- CMake 3.15 or higher
- vcpkg (recommended for dependency management)

## Getting Started

1. Build the project:
   \`\`\`bash
   mkdir build && cd build
   cmake ..
   make
   \`\`\`

2. Run the application:
   \`\`\`bash
   ./${project_name}
   \`\`\`

The server will start on http://localhost:3000

## Project Structure

- \`lib/${project_name}\` - Core application code
- \`lib/${project_name}_web\` - Web-specific code
- \`test\` - Test files
- \`assets\` - Static assets
- \`config\` - Configuration files

## Development

- Run tests: \`make test\`
- Format code: \`make format\`
- Build docs: \`make docs\`

## License

MIT
EOL
}

# Create directory structure
create_structure() {
    local project_name=$1
    local project_dir=$2
    local template=$3

    # Create main project directory
    mkdir -p "$project_dir"
    cd "$project_dir" || error "Failed to change to project directory"

    # Create Phoenix-style directory structure
    mkdir -p lib/${project_name}/{live,components}
    mkdir -p lib/${project_name}_web/{controllers,components}
    mkdir -p assets/{css,js}
    mkdir -p priv/{static}
    mkdir -p config/{dev,prod}
    mkdir -p test/support
    mkdir -p test/${project_name}
    mkdir -p test/${project_name}_web

    # Create main application file
    cat > lib/${project_name}/application.hpp << EOL
module;

#include <feather.hpp>
// Include other application headers here

EOL

    # Create main source file
    cat > lib/${project_name}_web/main.cpp << EOL
module;

import ${project_name}.application;

using namespace feather::core;

int main(int argc, char* argv[]) {
    try {
        // TODO: Add app config and init here

        // Configure router
        ${project_name}_web::router::configure();

        // Start server
        Server()
            CHAIN(Server::start, "localhost", 3000);
        return 0;
    } catch (const std::exception& e) {
        spdlog::error("Error: {}", e.what());
        return 1;
    }
}
EOL


    # Update router configuration
    cat > lib/${project_name}_web/router.hpp << EOL
module;

#include <feather/router.hpp>
#include <feather/core.hpp>
#include <feather/controller.hpp>

export module ${project_name}_web.router;

import ${project_name}_web.controllers.page_controller;

namespace ${project_name}_web::router {
    using namespace feather::router;
    using namespace feather::core;
    using namespace feather::controller;

    export inline void configure() {
        Router::fetch_instance()
            CHAIN(Router::pipeline, "browser",
                (CALLBACK_PLINE {
                    PLUG(Conn::fetch_session);
                    PLUG(accepts, s_list({"html"}));
                    PLUG(put_secure_browser_headers);
                    END_PLINE;
                }))
            CHAIN(Router::scope, "/",
                (CALLBACK_SCOPE {
                    PIPE_THROUGH("browser");

                    GET("/", page_controller::index);
                    GET("/about", page_controller::about);
                    GET("/contact", page_controller::contact);

                    END_SCOPE;
                }));
    }
}
EOL

    # Create page controller
    mkdir -p "lib/${project_name}_web/controllers"
    mkdir -p "lib/${project_name}_web/controllers/page_controller_html"

    # Create HTML templates
    for page in index about contact; do
        cat > "lib/${project_name}_web/controllers/page_controller_html/${page}.html" << EOL
<!DOCTYPE html>
<html>
<head>
    <title>${page^} - ${project_name}</title>
    <link rel="stylesheet" href="/css/app.css">
</head>
<body>
    <nav>
        <a href="/">Home</a>
        <a href="/about">About</a>
        <a href="/contact">Contact</a>
    </nav>
    <main>
        <h1>Welcome to ${project_name}</h1>
        <p>This is the ${page} page.</p>
    </main>
    <script src="/js/app.js"></script>
</body>
</html>
EOL
    done

    # Create controller
    cat > "lib/${project_name}_web/controllers/page_controller.hpp" << EOL
module;

#include <feather/controller.hpp>
#include <feather/core.hpp>

export module ${project_name}_web.controllers.page_controller;

namespace ${project_name}_web::page_controller {
    using namespace feather::controller;
    using namespace feather::core;

    export Conn const index(Conn const& conn) {
        return render(conn, "index.html", json{{"title", "Welcome to ${project_name}!"}});
    }

    export Conn const about(Conn const& conn) {
        return render(conn, "about.html", json{{"title", "About ${project_name}"}});
    }

    export Conn const contact(Conn const& conn) {
        return render(conn, "contact.html", json{{"title", "Contact ${project_name}"}});
    }
}
EOL

    # Create basic CSS
    cat > assets/css/app.css << EOL
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
}

nav {
    background: #333;
    padding: 1rem;
}

nav a {
    color: white;
    text-decoration: none;
    margin-right: 1rem;
}

main {
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
}

h1 {
    color: #333;
}
EOL

    # Create basic JavaScript
    cat > assets/js/app.js << EOL
console.log('${project_name} application loaded');
EOL

    # Create CMakeLists.txt
    cat > CMakeLists.txt << EOL
cmake_minimum_required(VERSION 3.15)
project($project_name VERSION 0.1.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Enable PCH support
set(CMAKE_PCH_ENABLED ON)

# Find required packages
find_package(fmt REQUIRED)
find_package(nlohmann_json REQUIRED)
find_package(spdlog REQUIRED)

# Fetch feather
include(FetchContent)
FetchContent_Declare(
    feather
    GIT_REPOSITORY https://github.com/BolvicBolvicovic/feather
    GIT_TAG main
)
FetchContent_MakeAvailable(feather)

# Source files
file(GLOB_RECURSE SOURCES 
    "lib/${project_name}/*.cpp"
    "lib/${project_name}_web/*.cpp"
)

add_executable(\${PROJECT_NAME} \${SOURCES})

# Create and use PCH
set(PCH_HEADERS
    <feather.hpp>
    <spdlog/spdlog.h>
    <nlohmann/json.hpp>
)
target_precompile_headers(\${PROJECT_NAME} PRIVATE \${PCH_HEADERS})

target_include_directories(\${PROJECT_NAME} PRIVATE
    \${CMAKE_SOURCE_DIR}/lib
    \${CMAKE_SOURCE_DIR}/config
    \${feather_SOURCE_DIR}/include
)

target_link_libraries(\${PROJECT_NAME} PRIVATE
    feather::core
    feather::controller
    feather::router
    feather::server
    fmt::fmt
    nlohmann_json::nlohmann_json
    spdlog::spdlog
)

# Assets handling
file(COPY \${CMAKE_SOURCE_DIR}/assets DESTINATION \${CMAKE_BINARY_DIR})
file(COPY \${CMAKE_SOURCE_DIR}/priv DESTINATION \${CMAKE_BINARY_DIR})

# Testing
enable_testing()
add_subdirectory(test)

# Formatting
find_program(CLANG_FORMAT "clang-format")
if(CLANG_FORMAT)
    add_custom_target(format
        COMMAND \${CLANG_FORMAT} -i \${SOURCES}
        WORKING_DIRECTORY \${CMAKE_SOURCE_DIR}
    )
endif()

# Documentation
find_package(Doxygen)
if(DOXYGEN_FOUND)
    set(DOXYGEN_IN \${CMAKE_SOURCE_DIR}/docs/Doxyfile.in)
    set(DOXYGEN_OUT \${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
    configure_file(\${DOXYGEN_IN} \${DOXYGEN_OUT} @ONLY)
    add_custom_target(docs
        COMMAND \${DOXYGEN_EXECUTABLE} \${DOXYGEN_OUT}
        WORKING_DIRECTORY \${CMAKE_CURRENT_BINARY_DIR}
    )
endif()
EOL

    success "Created project structure!"
}

# Initialize git repository
init_git() {
    
    git init
    git add .
    git commit -m "Initial commit"
    
    success "Initialized git repository!"
}

# Main function
main() {
    local project_name=""
    local init_git_repo=true
    local install_deps=true
    local template="minimal"
    local port=3000
    local host="localhost"

    # Check if any arguments are provided
    if [ $# -eq 0 ]; then
        usage
        exit 0
    fi

    # Check if first argument is a valid command
    case $1 in
        new)
            shift
            if [ $# -eq 0 ]; then
                error "Project name is required after 'new' command"
            fi
            project_name=$1
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            error "Unknown command: $1. Use 'fthr new' to create a new project or 'fthr --help' for more information."
            ;;
    esac

    # Parse remaining options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --no-git)
                init_git_repo=false
                shift
                ;;
            --no-deps)
                install_deps=false
                shift
                ;;
            --template)
                shift
                if [ $# -eq 0 ]; then
                    error "Template name is required after '--template'"
                fi
                template=$1
                shift
                ;;
            --port)
                shift
                if [ $# -eq 0 ]; then
                    error "Port number is required after '--port'"
                fi
                port=$1
                shift
                ;;
            --host)
                shift
                if [ $# -eq 0 ]; then
                    error "Host is required after '--host'"
                fi
                host=$1
                shift
                ;;
            *)
                error "Unknown option: $1"
                ;;
        esac
    done

    # Check if project name is provided
    if [ -z "$project_name" ]; then
        error "Project name is required"
    fi

    # Check if project name is valid
    if [[ ! "$project_name" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
        error "Invalid project name. Use only letters, numbers, and underscores. Must start with a letter."
    fi

    # Create project directory
    local project_dir="$project_name"
    if [ -d "$project_dir" ]; then
        error "Directory '$project_dir' already exists"
    fi

    # Create project structure
    create_structure "$project_name" "$project_dir" "$template"

    # Create README
    create_readme "$project_name" "$template"

    # Initialize git if requested
    if [ "$init_git_repo" = true ]; then
        init_git
    fi

    success "Project '$project_name' created successfully!"
    # TODO: info "You can launch the server with 'fthr serve'"
}

# Run main function with all arguments
main "$@"